corgea_yaml_version: 1 # increment this to deactivate all older version of policies and replace with newer version.
policies:
  - policy_type: "BLAST"  # Required: Type of policy. Must be one of ["BLAST", "false_positive", "fix"]
    description: "This is new policy. This is vulnerable by design app, so i want to go through all the files and able to identify all possible vulnerabilities."  # Required: Description of the policy
    cwes: []  # Optional: List of CWE (Common Weakness Enumeration) codes related to this policy
    ignore_scan_paths: ["migrations", "config", ] # list out regex patterns for child folder to ignore. This would apply for all CWEs

  - policy_type: "BLAST" 
    description: "Detect SQL Injection vulnerabilities (CWE-89) in this Django-based application, which primarily handles user data and authentication. Ensure that all database queries are parameterized to prevent unauthorized access or manipulation of data. Additionally, identify potential Information Exposure (CWE-201) risks, ensuring that sensitive data such as user credentials and personal information are not exposed through logs or error messages."
    cwes: [89, 201]

  - policy_type: "BLAST"
    path: "sql/services/" # folder to apply this policy. Optionally, user can place separate YAML file in subfolder path instead of having path attribute here.
    description: "This folder is responsible for data access that is used from public facing feature also."
    cwes: []

  - policy_type: "false_positive"
    path: "sql/services/"
    description: "Identify and flag potential false positive vulnerabilities by analyzing patterns that commonly lead to incorrect vulnerability detection, such as overly broad regex patterns or misconfigured security rules. This policy aims to reduce noise in vulnerability reports by ensuring that only genuine security issues are highlighted."
    cwes: []  # Empty list to select all CWEs.

  - policy_type: "fix"
    path: "sql/services/"
    description: "Ensure that all file paths are validated to prevent unauthorized access, resources are properly closed after use, and user inputs are sanitized to prevent command injection."
    cwes: [22, 25, 78]
